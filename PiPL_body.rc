/*
    This file is part of "Filter Foundry", a filter plugin for Adobe Photoshop
    Copyright (C) 2003-2009 Toby Thain, toby@telegraphics.com.au
    Copyright (C) 2018-2021 Daniel Marschall, ViaThinkSoft

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// This RC file is for Windows only.
// The PiPL_body contains the properties which are added to PIPL and RCDATA.
// PIPL will additionally receive name, catg and hstm
// Attention: This file may only contain 5 properties. If this number changes,
//            please also change PiPL.rc

VENDORID, LC(k,i,n,d), NULLID, 4L, LC(8,B,F,M),	/* Filter module */
VENDORID, LC(v,e,r,s), NULLID, 4L, latestFilterSubVersion,latestFilterVersion, /* Version Number */

#ifdef _WIN64
    VENDORID, LC(8,6,6,4), NULLID, 12L, "PluginMain\0\0",  /* Entrypoint Name (Long Word padded C String) */
#else
    VENDORID, LC(w,x,8,6), NULLID, 12L, "PluginMain\0\0",  /* Entrypoint Name (Long Word padded C String) */
#endif

VENDORID, LC(m,o,d,e), NULLID, 4L, /* first 2 bytes:  */ flagSupportsGrayScale|flagSupportsIndexedColor|flagSupportsRGBColor|flagSupportsCMYKColor|flagSupportsHSLColor|flagSupportsHSBColor|flagSupportsMultichannel,
                                   /* second 2 bytes: */ flagSupportsDuotone|flagSupportsLABColor,

/* We need this to enable the plugin for BigDocuments */
VENDORID, LC(m,s,3,2), 0L, 8L, 2000000L, 2000000L,

/* FilterCaseInfo - in all cases:
	   inStraightData,
	   outStraightData,
	   doNotWriteOutsideSelection,
	   doesNotFilterLayerMasks,
	   worksWithBlankData,
	   doNotCopySourceToDestination */
VENDORID, LC(f,i,c,i), NULLID, 28L,

	/* Filter Case 1: filterCaseFlatImageNoSelection [A background layer or a flat image] */
	// inputHandling [Preprocessing actions on the image data] = 01h
	// outputHandling [Postprocessing actions on the image data] = 01h
	// flags1 [Flags for how the filter case information should be treated] = 03h
	//       PIFilterDontCopyToDestinationBit  = true
	//       PIFilterWorksWithBlankDataBit     = true
	//       PIFilterFiltersLayerMaskBit       = false
	//       PIFilterWritesOutsideSelectionBit = false
	// flags2 [Reserved] = 00h
	"\001\001\003\000",

	/* Filter Case 2: filterCaseFlatImageWithSelection [No transparency data, but a selection may be present] */
	// inputHandling [Preprocessing actions on the image data] = 01h
	// outputHandling [Postprocessing actions on the image data] = 01h
	// flags1 [Flags for how the filter case information should be treated] = 03h
	//       PIFilterDontCopyToDestinationBit  = true
	//       PIFilterWorksWithBlankDataBit     = true
	//       PIFilterFiltersLayerMaskBit       = false
	//       PIFilterWritesOutsideSelectionBit = false
	// flags2 [Reserved] = 00h
	"\001\001\003\000",

	/* Filter Case 3: filterCaseFloatingSelection [Image data with an accompanying mask] */
	// inputHandling [Preprocessing actions on the image data] = 01h
	// outputHandling [Postprocessing actions on the image data] = 01h
	// flags1 [Flags for how the filter case information should be treated] = 03h
	//       PIFilterDontCopyToDestinationBit  = true
	//       PIFilterWorksWithBlankDataBit     = true
	//       PIFilterFiltersLayerMaskBit       = false
	//       PIFilterWritesOutsideSelectionBit = false
	// flags2 [Reserved] = 00h
	"\001\001\003\000",

	/* Filter Case 4: filterCaseEditableTransparencyNoSelection [Layer with transparency editing enabled and no selection] */
	// inputHandling [Preprocessing actions on the image data] = 01h
	// outputHandling [Postprocessing actions on the image data] = 01h
	// flags1 [Flags for how the filter case information should be treated] = 03h
	//       PIFilterDontCopyToDestinationBit  = true
	//       PIFilterWorksWithBlankDataBit     = true
	//       PIFilterFiltersLayerMaskBit       = false
	//       PIFilterWritesOutsideSelectionBit = false
	// flags2 [Reserved] = 00h
	"\001\001\003\000",

	/* Filter Case 5: filterCaseEditableTransparencyWithSelection [Layer with transparency editing enabled and a selection] */
	// inputHandling [Preprocessing actions on the image data] = 01h
	// outputHandling [Postprocessing actions on the image data] = 01h
	// flags1 [Flags for how the filter case information should be treated] = 03h
	//       PIFilterDontCopyToDestinationBit  = true
	//       PIFilterWorksWithBlankDataBit     = true
	//       PIFilterFiltersLayerMaskBit       = false
	//       PIFilterWritesOutsideSelectionBit = false
	// flags2 [Reserved] = 00h
	"\001\001\003\000",

	/* Filter Case 6: filterCaseProtectedTransparencyNoSelection [Layer with transparency editing disabled and no selection] */
	// inputHandling [Preprocessing actions on the image data] = 01h
	// outputHandling [Postprocessing actions on the image data] = 01h
	// flags1 [Flags for how the filter case information should be treated] = 03h
	//       PIFilterDontCopyToDestinationBit  = true
	//       PIFilterWorksWithBlankDataBit     = true
	//       PIFilterFiltersLayerMaskBit       = false
	//       PIFilterWritesOutsideSelectionBit = false
	// flags2 [Reserved] = 00h
	"\001\001\003\000",

	/* Filter Case 7: filterCaseProtectedTransparencyWithSelection [Layer with transparency editing disabled and a selection] */
	// inputHandling [Preprocessing actions on the image data] = 01h
	// outputHandling [Postprocessing actions on the image data] = 01h
	// flags1 [Flags for how the filter case information should be treated] = 03h
	//       PIFilterDontCopyToDestinationBit  = true
	//       PIFilterWorksWithBlankDataBit     = true
	//       PIFilterFiltersLayerMaskBit       = false
	//       PIFilterWritesOutsideSelectionBit = false
	// flags2 [Reserved] = 00h
	"\001\001\003\000",
